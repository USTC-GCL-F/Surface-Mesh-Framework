cmake_minimum_required(VERSION 3.7)
project(SurfaceFramework)

add_definitions(/D_USE_MATH_DEFINES)

#Complier
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    message(STATUS "编译器是gcc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    message(STATUS "编译器是msvc")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
    message(STATUS "编译器是AppleClang")
    set(Qt5Core_DIR /Users/chenhonghu/Downloads/meigyoku/qt/5.14.2/clang_64/lib/cmake/Qt5Core)#设置QT的目录
    set(Qt5Gui_DIR /Users/chenhonghu/Downloads/meigyoku/qt/5.14.2/clang_64/lib/cmake/Qt5Gui)
    set(Qt5OpenGL_DIR /Users/chenhonghu/Downloads/meigyoku/qt/5.14.2/clang_64/lib/cmake/Qt5OpenGL)
    set(Qt5Widgets_DIR /Users/chenhonghu/Downloads/meigyoku/qt/5.14.2/clang_64/lib/cmake/Qt5Widgets)
    find_package(OpenGL REQUIRED)
    include_directories(${OPENGL_INCLUDE_DIR})
    find_package(GLUT REQUIRED)
    include_directories(${GLUT_INCLUDE_DIR})
endif()

#path
SET(EIGEN_PATH "D:/LIBRARY/Eigen")
SET(OPENMESH_PATH "D:/LIBRARY/OpenMesh/src")
SET(OPENMESH_LIB_PATH "D:/LIBRARY/OpenMesh/build_vs/Build/lib")

#QT
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
find_package(Qt5Widgets REQUIRED)  
find_package(Qt5Core REQUIRED)
find_package(Qt5Gui REQUIRED)
find_package(Qt5OpenGL REQUIRED)

set(QRC_SOURCE_FILES src/surfacemeshprocessing.qrc)
qt5_add_resources(QRC_FILES ${QRC_SOURCE_FILES})

include_directories(${EIGEN_PATH})
include_directories(${OPENMESH_PATH})
link_directories(${OPENMESH_LIB_PATH})

file (GLOB SRCFILES
    src/*.cpp
    src/MeshViewer/*.cpp
    src/MeshViewer/Aux_Transform_Mesh_Dialog.h
    src/Common/*.cpp
    src/ANN/*.cpp
)

add_executable(${PROJECT_NAME} ${SRCFILES} ${QRC_FILES})

target_link_libraries(${PROJECT_NAME} Qt5::Widgets Qt5::Core Qt5::Gui Qt5::OpenGL
    optimized OpenMeshCore 
    optimized OpenMeshTools
    debug OpenMeshCored 
    debug OpenMeshToolsd
)
if (CMAKE_SYSTEM_NAME MATCHES "Windows")
target_link_libraries(${PROJECT_NAME} 
    opengl32
    glu32   
)
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    target_link_libraries(${PROJECT_NAME} 
    ${GLUT_LIBRARY} 
    ${OPENGL_LIBRARY}
)
endif()
